name: Build Release Tools
on:
   # STOPSHIP
  # pull_request:
  # push:
  #   branches:
  #     - master

  workflow_run:
    workflows: [Create Release Page]
    types: [completed]

env:
  RUSTFLAGS: -D warnings
  CARGO_INCREMENTAL: 0
  RUSTUP_MAX_RETRIES: 10
  CARGO_NET_RETRY: 10

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: get release info
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ${{ github.event.workflow_run.workflow_id }}
          run_id: ${{ github.event.workflow_run.id }}
          name: release assets url
      - name: read release info
        id: release
        run: |
          echo ::set-output name=tag::$(cat release-upload.url | cut -d \  -f 1)
          echo ::set-output name=upload_url::$(cat release-upload.url | cut -d \  -f 2)
    outputs:
      tag: ${{ steps.release.outputs.tag }}
      upload_url: ${{ steps.release.outputs.upload_url }}

  build:
    name: Build ${{ matrix.bin }}-${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    # needs: release

    strategy:
      fail-fast: false
      matrix:
        target:
          - artifact-name: move-disassembler
            bin: disassembler
            crate: disassembler

          - artifact-name: dove
            bin: dove
            crate: dove
            libs: openssl

          - artifact-name: move-executor
            bin: executor
            crate: move-executor

          - artifact-name: move-language-server
            bin: move-language-server
            crate: move-language-server

          - artifact-name: move-resource-viewer
            bin: move-resource-viewer
            crate: move-resource-viewer

          - artifact-name: move-testrunner
            bin: testrunner
            crate: move-executor

        platform:
          - name: darwin
            os: macos-latest
            triplet: x64-osx
            env: {}
          - name: linux
            os: ubuntu-latest
            triplet: x64-linux
            env: {}
          - name: win
            os: windows-latest
            triplet: x64-windows-static-md
            suffix: .exe

        exclude:
          - { platform: { name: win }, target: { bin: move-resource-viewer } }
          - { platform: { name: win }, target: { bin: testrunner } }

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout (${{ needs.release.outputs.tag }}-${{ github.event.workflow_run.head_sha }})
        uses: actions/checkout@v2
        # with:
        #   ref: ${{ github.event.workflow_run.head_sha }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Restore from cache and run vcpkg
        if: ${{ matrix.target.libs != null }}
        uses: lukka/run-vcpkg@v7
        with:
          vcpkgArguments: ${{ matrix.target.libs }}
          vcpkgDirectory: '${{github.workspace}}/3rdparty/vcpkg'
          vcpkgTriplet: ${{ matrix.platform.triplet }}
          vcpkgGitCommitId: "3b4dd085b0f5b410d9f587b3c9f7ad08a07449aa"

      - name: Build ${{ matrix.target.bin }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --bin ${{ matrix.target.bin }} -p ${{ matrix.target.crate }}

      - id: version
        name: get version
        uses: ./.github/actions/crate-version
        with:
          crate: ${{ matrix.target.crate }}

      - name: upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./target/release/${{ matrix.target.bin }}
          asset_name: ${{ steps.archive.outputs.name }}-${{ steps.version.outputs.value }}-${{ matrix.platform.name }}${{ matrix.platform.suffix }}
          asset_content_type: application/gzip

      # - id: mls
      #   name: get version of move-language-server
      #   uses: ./.github/actions/crate-version
      #   with: { crate: move-language-server }

      # - id: dove
      #   name: get version of dove
      #   uses: ./.github/actions/crate-version
      #   with: { crate: dove }

      # - id: executor
      #   name: get version of move-executor
      #   uses: ./.github/actions/crate-version
      #   with: { crate: move-executor }

      # - id: disassembler
      #   name: get version of disassembler
      #   uses: ./.github/actions/crate-version
      #   with: { crate: disassembler }

      # - id: mrv
      #   if: matrix.os != 'windows-latest'
      #   name: get version of resource-viewer
      #   uses: ./.github/actions/crate-version
      #   with: { crate: move-resource-viewer }

      # - name: save build info
      #   id: build-info
      #   run: |
      #     uname -a > build-info.txt
      #     rustc -V >> build-info.txt
      #     echo "::set-output name=arch::$(uname -m)"

      # - name: prepare dist dirs
      #   id: dist
      #   run: |
      #     RELEASE_DIR=./target/release
      #     DIST_DIR=$RELEASE_DIR/dist
      #     mkdir -p $DIST_DIR
      #     echo "::set-output name=build::$RELEASE_DIR"
      #     echo "::set-output name=dist::$DIST_DIR"

      # - name: prepare toolchain
      #   id: toolchain
      #   run: |
      #     echo "git-tag r '$GITHUB_REF'"
      #     echo "git-tag d '$(git describe --tags)'"
      #     echo "tag by release ${{ needs.release.outputs.tag }}"

      #     ARCH="${{ steps.build-info.outputs.arch }}"
      #     RELEASE_DIR=${{ steps.dist.outputs.build }}
      #     DIST_DIR=${{ steps.dist.outputs.dist }}
      #     PKG_NAME="move-toolchain-${{ needs.release.outputs.tag }}-${{ matrix.platform }}-$ARCH"
      #     PKG_DIR=$DIST_DIR/$PKG_NAME
      #     PKG_BIN_DIR=$PKG_DIR/bin

      #     DOVE_NAME=dove$OS_BIN_EXT
      #     MLS_NAME=move-language-server$OS_BIN_EXT
      #     MRV_NAME=move-resource-viewer$OS_BIN_EXT
      #     EXECUTOR_NAME=move-executor$OS_BIN_EXT
      #     TESTRUNNER_NAME=move-testrunner$OS_BIN_EXT
      #     DISASSEMBLER_NAME=move-disassembler$OS_BIN_EXT

      #     mkdir -p $PKG_BIN_DIR
      #     cp build-info.txt $PKG_DIR/

      #     cp $RELEASE_DIR/executor$OS_BIN_EXT $PKG_BIN_DIR/$EXECUTOR_NAME
      #     cp $RELEASE_DIR/testrunner$OS_BIN_EXT $PKG_BIN_DIR/$TESTRUNNER_NAME
      #     cp $RELEASE_DIR/disassembler$OS_BIN_EXT $PKG_BIN_DIR/$DISASSEMBLER_NAME
      #     cp $RELEASE_DIR/move-language-server$OS_BIN_EXT $PKG_BIN_DIR/$MLS_NAME
      #     cp $RELEASE_DIR/move-resource-viewer$OS_BIN_EXT $PKG_BIN_DIR/$MRV_NAME
      #     cp $RELEASE_DIR/dove$OS_BIN_EXT $PKG_BIN_DIR/$DOVE_NAME

      #     echo "::set-output name=name::$PKG_NAME"
      #     echo "::set-output name=path::$PKG_DIR"

      # - name: archive toolchain
      #   id: archive
      #   uses: ./.github/actions/archive
      #   with:
      #     name: ${{ steps.toolchain.outputs.name }}
      #     path: ${{ steps.toolchain.outputs.path }}

      # - name: prepare standalone executables
      #   id: artifact
      #   run: |
      #     ARCH="${{ steps.build-info.outputs.arch }}"
      #     RELEASE_DIR=${{ steps.dist.outputs.build }}

      #     MLS_NAME=move-language-server-${{ steps.mls.outputs.version }}-${{ matrix.platform }}-$ARCH$OS_BIN_EXT
      #     MRV_NAME=move-resource-viewer-${{ steps.mrv.outputs.version }}-${{ matrix.platform }}-$ARCH$OS_BIN_EXT
      #     DOVE_NAME=dove-${{ steps.dove.outputs.version }}-${{ matrix.platform }}-$ARCH$OS_BIN_EXT
      #     EXECUTOR_NAME=move-executor-${{ steps.executor.outputs.version }}-${{ matrix.platform }}-$ARCH$OS_BIN_EXT
      #     TESTRUNNER_NAME=move-testrunner-${{ steps.executor.outputs.version }}-${{ matrix.platform }}-$ARCH$OS_BIN_EXT
      #     DISASSEMBLER_NAME=move-disassembler-${{ steps.disassembler.outputs.version }}-${{ matrix.platform }}-$ARCH$OS_BIN_EXT
      #     cd $RELEASE_DIR

      #     mv executor$OS_BIN_EXT $EXECUTOR_NAME
      #     mv testrunner$OS_BIN_EXT $TESTRUNNER_NAME
      #     mv disassembler$OS_BIN_EXT $DISASSEMBLER_NAME
      #     mv move-language-server$OS_BIN_EXT $MLS_NAME
      #     mv move-resource-viewer$OS_BIN_EXT $MRV_NAME
      #     mv dove$OS_BIN_EXT $DOVE_NAME

      #     echo "::set-output name=mls::$MLS_NAME"
      #     echo "::set-output name=mrv::$MRV_NAME"
      #     echo "::set-output name=dove::$DOVE_NAME"
      #     echo "::set-output name=executor::$EXECUTOR_NAME"
      #     echo "::set-output name=testrunner::$TESTRUNNER_NAME"
      #     echo "::set-output name=disassembler::$DISASSEMBLER_NAME"
      #     echo "::set-output name=mls_path::$RELEASE_DIR/$MLS_NAME"
      #     echo "::set-output name=mrv_path::$RELEASE_DIR/$MRV_NAME"
      #     echo "::set-output name=dove_path::$RELEASE_DIR/$DOVE_NAME"
      #     echo "::set-output name=executor_path::$RELEASE_DIR/$EXECUTOR_NAME"
      #     echo "::set-output name=testrunner_path::$RELEASE_DIR/$TESTRUNNER_NAME"
      #     echo "::set-output name=disassembler_path::$RELEASE_DIR/$DISASSEMBLER_NAME"

      - name: upload Toolchain
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.archive.outputs.path }}
          asset_name: ${{ steps.archive.outputs.name }}
          asset_content_type: application/gzip

      # - name: upload MLS
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.release.outputs.upload_url }}
      #     asset_path: ${{ steps.artifact.outputs.mls_path }}
      #     asset_name: ${{ steps.artifact.outputs.mls }}
      #     asset_content_type: application/gzip

      # - name: upload MRV
      #   if: matrix.os != 'windows-latest'
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.release.outputs.upload_url }}
      #     asset_path: ${{ steps.artifact.outputs.mrv_path }}
      #     asset_name: ${{ steps.artifact.outputs.mrv }}
      #     asset_content_type: application/gzip

      # - name: upload dove
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.release.outputs.upload_url }}
      #     asset_path: ${{ steps.artifact.outputs.dove_path }}
      #     asset_name: ${{ steps.artifact.outputs.dove }}
      #     asset_content_type: application/gzip

      # - name: upload Executor
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.release.outputs.upload_url }}
      #     asset_path: ${{ steps.artifact.outputs.executor_path }}
      #     asset_name: ${{ steps.artifact.outputs.executor }}
      #     asset_content_type: application/gzip

      # - name: upload TestRunner
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.release.outputs.upload_url }}
      #     asset_path: ${{ steps.artifact.outputs.testrunner_path }}
      #     asset_name: ${{ steps.artifact.outputs.testrunner }}
      #     asset_content_type: application/gzip

      # - name: upload Disassembler
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.release.outputs.upload_url }}
      #     asset_path: ${{ steps.artifact.outputs.disassembler_path }}
      #     asset_name: ${{ steps.artifact.outputs.disassembler }}
      #     asset_content_type: application/gzip
